;****************************************************************************
;* パワーオンベクタ（for i.MX257）                                          *
;*                                                                          *
;*  File name : prstmx25.s79                                                *
;*                                                                          *
;* 01/Nov/2010  Created.                                                    *
;* 22/Feb/2011  Corrected the wrong instruction.                            *
;****************************************************************************


; Program Status Register

I_BIT           EQU     0x80
F_BIT           EQU     0x40
T_BIT           EQU     0x20
USR_MOD         EQU     0x10
FIQ_MOD         EQU     0x11
IRQ_MOD         EQU     0x12
SVC_MOD         EQU     0x13
ABT_MOD         EQU     0x17
UND_MOD         EQU     0x1B
SYS_MOD         EQU     0x1F

; Peripheral register offset

MPCTL           EQU     0x0
UPCTL           EQU     0x4
CCTL            EQU     0x8
CGCR0           EQU     0xC
MCR             EQU     0x64

CSCR0U          EQU     0x0
CSCR0L          EQU     0x4
CSCR0A          EQU     0x8

ESDCTL0         EQU     0x0
ESDCFG0         EQU     0x4
ESDCTL1         EQU     0x8
ESDCFG1         EQU     0xC
ESDMISC         EQU     0x10


        PROGRAM ?PRST
        SECTION IRQ_STACK:DATA:NOROOT(3)
        SECTION FIQ_STACK:DATA:NOROOT(3)
        SECTION SVC_STACK:DATA:NOROOT(3)
        SECTION ABT_STACK:DATA:NOROOT(3)
        SECTION UND_STACK:DATA:NOROOT(3)
        SECTION CSTACK:DATA:NOROOT(3)
        SECTION ROMEND:DATA:NOROOT(3)
        SECTION .text:CODE:NOROOT(2)
        SECTION .intvec:CODE:NOROOT(2)
        CODE32


        PUBLIC  _PRST
        REQUIRE _PRST

        EXTERN  _kernel_svchdr
        EXTERN  _kernel_inthdr

_PRST

        b       Reset_Handler
        ldr     pc, _UndHandler
        ldr     pc, _SwiHandler
        ldr     pc, _PreHandler
        ldr     pc, _AbtHandler
        nop
        ldr     pc, _IrqHandler
        ldr     pc, _FiqHandler

        LTORG
        DATA
                DCD     0
_UndHandler     DCD     UndHandler
_SwiHandler     DCD     _kernel_svchdr
_PreHandler     DCD     PreHandler
_AbtHandler     DCD     AbtHandler
                DCD     0
_IrqHandler     DCD     _kernel_inthdr
_FiqHandler     DCD     FiqHandler



;****************************************************************************
;       Power On Reset Handler                                              *
;                                                                           *
;****************************************************************************

        CODE32
        EXTERN  ?main
        EXTERN  _ddr_arm926_mmu_init

Reset_Handler
        mov     r0,  #SYS_MOD|I_BIT|F_BIT
        msr     cpsr_c,r0

; Initialize peripheral

        ldr     r3,  ESDRAMC
        ldr     r0,  [r3, #ESDCTL0]
        tst     r0,  #0x80000000
        bne     done_config

; Initialize clock distributer

        ldr     r2,  CCM
        ldr     r0,  MPCTL_D
        str     r0,  [r2, #MPCTL]
        ldr     r0,  UPCTL_D
        str     r0,  [r2, #UPCTL]
        ldr     r0,  CCTL_D
        str     r0,  [r2, #CCTL]
clock1
        ldr     r0,  [r2, #MPCTL]
        tst     r0,  #0x00008000
        beq     clock1
clock2
        ldr     r0,  [r2, #UPCTL]
        tst     r0,  #0x00008000
        beq     clock2

        ldr     r0,  CGCR0_D
        str     r0,  [r2, #CGCR0]
        ldr     r0,  MCR_D
        str     r0,  [r2, #MCR]

; Initialize Flash-Memory controller

        ldr     r4,  WEIM
        ldr     r0,  CSCR0U_D
        str     r0,  [r4, #CSCR0U]
        ldr     r0,  CSCR0L_D
        str     r0,  [r4, #CSCR0L]
        ldr     r0,  CSCR0A_D
        str     r0,  [r4, #CSCR0A]

; Initialize DDR SDRAM controller

        ldr     r0,  ESDMISC_D
        str     r0,  [r3, #ESDMISC]
        ldr     r0,  ESDCFG0_D
        str     r0,  [r3, #ESDCFG0]
        ldr     r0,  =0x80000000
        str     r0,  [r3, #ESDCTL0]
ddr_config
        ldr     r0,  [r3, #ESDCTL0]
        tst     r0,  #0x80000000
        beq     ddr_config

        ldr     r0,  ESDCTL_PRECH       ; Precharge ALL
        ldr     r1,  SDRAM_PREALL
        str     r0,  [r3, #ESDCTL0]
        ldr     r0,  [r1]

        ldr     r0,  ESDCTL_AUTOREF     ; Auto-Refresh x2
        ldr     r1,  SDRAM_BASE
        str     r0,  [r3, #ESDCTL0]
        str     r0,  [r1]
        str     r0,  [r1]

        ldr     r0,  ESDCTL_SMODE       ; Mode register Set
        ldr     r1,  SDRAM_MSR
        ldr     r2,  SDRAM_EMSR
        str     r0,  [r3, #ESDCTL0]
        ldrb    r0,  [r1]
        ldrb    r0,  [r2]

        ldr     r0,  ESDCTL_NORMAL
        str     r0,  [r3, #ESDCTL0]

done_config

; Enable mmu

        ldr     sp,  =SFE(CSTACK)
        bl      _ddr_arm926_mmu_init

; Copy code from flash-memory to sdram

        mov     r4,  pc
        nop
copy_1
        ldr     r0,  =copy_1
        ldr     r2,  =SFB(.intvec)
        ldr     r3,  =SFE(ROMEND)
        subs    r0,  r0,  r4
        beq     copy_end
        sub     r1,  r2,  r0
copy_start
        cmp     r2,  r3
        ldrls   r0,  [r1], #4
        strls   r0,  [r2], #4
        bls     copy_start
copy_end
        mrc     p15, 0, r15,  c7, c14,  3
        bne     copy_end
        mov     r0,  #0
        mcr     p15, 0,  r0,  c7,  c5,  0
        mcr     p15, 0,  r0,  c7, c10,  4

        ; Relocatable exec finished

        ldr     lr,  =abs_addr
        bx      lr

abs_addr

; Initialize stack pointer

        mov     r0,  #FIQ_MOD|I_BIT|F_BIT
        msr     cpsr_c, r0
        ldr     sp,  =SFE(FIQ_STACK)

        mov     r0,  #UND_MOD|I_BIT|F_BIT
        msr     cpsr_c, r0
        ldr     sp,  =SFE(UND_STACK)

        mov     r0,  #ABT_MOD|I_BIT|F_BIT
        msr     cpsr_c, r0
        ldr     sp,  =SFE(ABT_STACK)

        mov     r0,  #SVC_MOD|I_BIT|F_BIT
        msr     cpsr_c, r0
        ldr     sp,  =SFE(SVC_STACK)

        mov     r0,  #IRQ_MOD|I_BIT|F_BIT
        msr     cpsr_c, r0
        ldr     sp,  =SFE(IRQ_STACK)

        mov     r0,  #SYS_MOD|I_BIT|F_BIT
        msr     cpsr_c, r0

        ldr     lr,  =?main
        bx      lr


;******************************************************************************
        LTORG
        DATA
CCM             DCD     0x53F80000      ; Clock Control Module Base
MPCTL_D         DCD     0x800B2C01      ; MPCTL Data
UPCTL_D         DCD     0x84002800      ; UPCTL Data
CCTL_D          DCD     0x2C034000      ; CCTL Data
CGCR0_D         DCD     0x028A0000      ; CGCR0 Data
MCR_D           DCD     0x43000000      ; MCR Data

WEIM            DCD     0xB8002000      ; WEIM Module Base
CSCR0U_D        DCD     0x21414E85      ; CSCR0U Data
CSCR0L_D        DCD     0x45002553      ; CSCR0L Data
CSCR0A_D        DCD     0x00470800      ; CSCR0A Data

ESDRAMC         DCD     0xB8001000      ; Enhanced SDRAM Controller Base
SDRAM_BASE      DCD     0x80000000      ; SDRAM base address
SDRAM_PREALL    DCD     0x80000400      ; SDRAM Precharge all command
SDRAM_MSR       DCD     0x80000033      ; SDRAM Mode Register Set
SDRAM_EMSR      DCD     0x80200000      ; SDRAM Extendded Mode Register Set

ESDMISC_D       DCD     0x00000046      ; Miscellaneous register
ESDCFG0_D       DCD     0x006AC73D      ; Configuration register 0

ESDCTL_PRECH    DCD     0x90000000      ; SDRAM Precharge command
ESDCTL_AUTOREF  DCD     0xA0000000      ; SDRAM Autorefresh command
ESDCTL_SMODE    DCD     0xB0000000      ; SDRAM Set mode command
ESDCTL_NORMAL   DCD     0x83216080      ; SDRAM Normal read/write command


;******************************************************************************


;****************************************************************************
;       Undefine Handler                                                    *
;                                                                           *
;****************************************************************************

UndHandler
        b     UndHandler

;****************************************************************************
;       Prefetch Handler                                                    *
;                                                                           *
;****************************************************************************

PreHandler
        b     PreHandler

;****************************************************************************
;       Abort Handler                                                       *
;                                                                           *
;****************************************************************************

AbtHandler
        b     AbtHandler

;****************************************************************************
;       FIQ Handler                                                         *
;                                                                           *
;****************************************************************************

FiqHandler
        b     FiqHandler

        END
